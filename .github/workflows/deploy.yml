name: Deploy Todo App to AWS ECS

on:
  push:
    branches:
      - main        # Production
      - develop     # UAT
      - dev         # Development
  pull_request:
    branches:
      - main
      - develop

env:
  AWS_REGION: us-west-2
  ECR_FRONTEND_REPOSITORY: todo-app-frontend
  ECR_BACKEND_REPOSITORY: todo-app-backend

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deploy: ${{ steps.env.outputs.deploy }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=uat" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python -m pytest tests/ --cov=. --cov-report=xml || echo "Tests not found, skipping"

  build-and-push:
    needs: [test, determine-environment]
    runs-on: ubuntu-latest
    if: needs.determine-environment.outputs.deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          cd frontend
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$ENVIRONMENT .
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$GITHUB_SHA .
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$ENVIRONMENT
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$GITHUB_SHA

      - name: Build, tag, and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          cd backend
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$ENVIRONMENT .
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$GITHUB_SHA .
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$ENVIRONMENT
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$GITHUB_SHA

  terraform-plan:
    needs: [determine-environment, build-and-push]
    runs-on: ubuntu-latest
    if: needs.determine-environment.outputs.deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform/environments/${{ needs.determine-environment.outputs.environment }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform/environments/${{ needs.determine-environment.outputs.environment }}
        run: terraform plan -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ needs.determine-environment.outputs.environment }}
          path: ./terraform/environments/${{ needs.determine-environment.outputs.environment }}/tfplan

  terraform-apply:
    needs: [determine-environment, terraform-plan]
    runs-on: ubuntu-latest
    if: needs.determine-environment.outputs.deploy == 'true' && github.event_name == 'push'
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ needs.determine-environment.outputs.environment }}
          path: ./terraform/environments/${{ needs.determine-environment.outputs.environment }}

      - name: Terraform Init
        working-directory: ./terraform/environments/${{ needs.determine-environment.outputs.environment }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform/environments/${{ needs.determine-environment.outputs.environment }}
        run: terraform apply -auto-approve tfplan

      - name: Get Application URL
        working-directory: ./terraform/environments/${{ needs.determine-environment.outputs.environment }}
        run: |
          APP_URL=$(terraform output -raw application_url)
          echo "Application deployed to: $APP_URL"
          echo "APP_URL=$APP_URL" >> $GITHUB_ENV

      - name: Comment PR with deployment info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Deployment Complete**
              
              Environment: \`${{ needs.determine-environment.outputs.environment }}\`
              Application URL: ${{ env.APP_URL }}
              
              The application has been successfully deployed to AWS ECS.`
            })

  smoke-tests:
    needs: [determine-environment, terraform-apply]
    runs-on: ubuntu-latest
    if: needs.determine-environment.outputs.deploy == 'true' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Wait for deployment to stabilize
        run: |
          echo "Waiting 60 seconds for deployment to stabilize..."
          sleep 60

      - name: Get Application URL
        working-directory: ./terraform/environments/${{ needs.determine-environment.outputs.environment }}
        run: |
          terraform init
          APP_URL=$(terraform output -raw application_url)
          echo "APP_URL=$APP_URL" >> $GITHUB_ENV

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against $APP_URL"
          
          # Test frontend
          if curl -f -s "$APP_URL" > /dev/null; then
            echo "✅ Frontend is responding"
          else
            echo "❌ Frontend health check failed"
            exit 1
          fi
          
          # Test backend API
          if curl -f -s "$APP_URL/api/health" > /dev/null; then
            echo "✅ Backend API is responding"
          else
            echo "❌ Backend API health check failed"
            exit 1
          fi
          
          echo "🎉 All smoke tests passed!"
